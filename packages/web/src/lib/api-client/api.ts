/* tslint:disable */
/* eslint-disable */
/**
 * Sapie API
 * API documentation for the Sapie knowledge management application
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthControllerGetCurrentUser401Response
 */
export interface AuthControllerGetCurrentUser401Response {
    /**
     * 
     * @type {number}
     * @memberof AuthControllerGetCurrentUser401Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthControllerGetCurrentUser401Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthControllerGetCurrentUser401Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticatedUser
 */
export interface AuthenticatedUser {
    /**
     * Unique user identifier
     * @type {string}
     * @memberof AuthenticatedUser
     */
    'uid': string;
    /**
     * User email address
     * @type {string}
     * @memberof AuthenticatedUser
     */
    'email'?: string;
    /**
     * User display name
     * @type {string}
     * @memberof AuthenticatedUser
     */
    'displayName'?: string;
    /**
     * User profile photo URL
     * @type {string}
     * @memberof AuthenticatedUser
     */
    'photoURL'?: string;
    /**
     * Whether the user email is verified
     * @type {boolean}
     * @memberof AuthenticatedUser
     */
    'emailVerified': boolean;
    /**
     * Authentication provider information
     * @type {Array<ProviderDataDto>}
     * @memberof AuthenticatedUser
     */
    'providerData': Array<ProviderDataDto>;
    /**
     * Custom claims assigned to the user
     * @type {object}
     * @memberof AuthenticatedUser
     */
    'customClaims'?: object;
}
/**
 * 
 * @export
 * @interface ContentDto
 */
export interface ContentDto {
    /**
     * Unique identifier for the content item
     * @type {string}
     * @memberof ContentDto
     */
    'id': string;
    /**
     * Display name of the content item
     * @type {string}
     * @memberof ContentDto
     */
    'name': string;
    /**
     * Type of content
     * @type {string}
     * @memberof ContentDto
     */
    'type': ContentDtoTypeEnum;
    /**
     * ID of the parent directory, null for root directory
     * @type {object}
     * @memberof ContentDto
     */
    'parentId': object | null;
    /**
     * ID of the user who owns this content
     * @type {string}
     * @memberof ContentDto
     */
    'ownerId': string;
    /**
     * URL to the actual content file (only for files)
     * @type {object}
     * @memberof ContentDto
     */
    'contentUrl'?: object | null;
    /**
     * Size of the content in bytes (only for files)
     * @type {object}
     * @memberof ContentDto
     */
    'size'?: object | null;
    /**
     * Timestamp when the content was created
     * @type {string}
     * @memberof ContentDto
     */
    'createdAt': string;
    /**
     * Timestamp when the content was last updated
     * @type {string}
     * @memberof ContentDto
     */
    'updatedAt': string;
}

export const ContentDtoTypeEnum = {
    Directory: 'directory',
    Note: 'note'
} as const;

export type ContentDtoTypeEnum = typeof ContentDtoTypeEnum[keyof typeof ContentDtoTypeEnum];

/**
 * 
 * @export
 * @interface CreateContentDto
 */
export interface CreateContentDto {
    /**
     * Title of the new content item
     * @type {string}
     * @memberof CreateContentDto
     */
    'title': string;
    /**
     * ID of the parent directory
     * @type {string}
     * @memberof CreateContentDto
     */
    'parentId': string;
}
/**
 * 
 * @export
 * @interface HealthControllerGetHealth200Response
 */
export interface HealthControllerGetHealth200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerGetHealth200Response
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthControllerGetHealth200Response
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof HealthControllerGetHealth200Response
     */
    'environment'?: string;
}
/**
 * 
 * @export
 * @interface ProviderDataDto
 */
export interface ProviderDataDto {
    /**
     * Authentication provider identifier
     * @type {string}
     * @memberof ProviderDataDto
     */
    'providerId': string;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get API status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get API status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @summary Get API status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - interface
 * @export
 * @interface AppApi
 */
export interface AppApiInterface {
    /**
     * 
     * @summary Get API status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApiInterface
     */
    appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<string>;

}

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI implements AppApiInterface {
    /**
     * 
     * @summary Get API status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns detailed information about the currently authenticated user from Firebase Auth
         * @summary Get current user information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns detailed information about the currently authenticated user from Firebase Auth
         * @summary Get current user information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticatedUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authControllerGetCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Returns detailed information about the currently authenticated user from Firebase Auth
         * @summary Get current user information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<AuthenticatedUser> {
            return localVarFp.authControllerGetCurrentUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Returns detailed information about the currently authenticated user from Firebase Auth
     * @summary Get current user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authControllerGetCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<AuthenticatedUser>;

}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Returns detailed information about the currently authenticated user from Firebase Auth
     * @summary Get current user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authControllerGetCurrentUser(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerGetCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new note with a given title and parent ID.
         * @summary Create a new note
         * @param {CreateContentDto} createContentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateContent: async (createContentDto: CreateContentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createContentDto' is not null or undefined
            assertParamExists('contentControllerCreateContent', 'createContentDto', createContentDto)
            const localVarPath = `/api/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of content items for a given parent ID.
         * @summary Get content by parent ID
         * @param {string} parentId The ID of the parent content item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetContent: async (parentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('contentControllerGetContent', 'parentId', parentId)
            const localVarPath = `/api/content`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the authenticated user\'s root directory (\"My Contents\"). If the directory doesn\'t exist, it will be automatically created. This is the entry point for all content management operations.
         * @summary Get or create user\'s root directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetRootDirectory: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/content/root`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new note with a given title and parent ID.
         * @summary Create a new note
         * @param {CreateContentDto} createContentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerCreateContent(createContentDto: CreateContentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerCreateContent(createContentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerCreateContent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of content items for a given parent ID.
         * @summary Get content by parent ID
         * @param {string} parentId The ID of the parent content item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetContent(parentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetContent(parentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetContent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the authenticated user\'s root directory (\"My Contents\"). If the directory doesn\'t exist, it will be automatically created. This is the entry point for all content management operations.
         * @summary Get or create user\'s root directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetRootDirectory(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetRootDirectory(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetRootDirectory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * Creates a new note with a given title and parent ID.
         * @summary Create a new note
         * @param {ContentApiContentControllerCreateContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateContent(requestParameters: ContentApiContentControllerCreateContentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContentDto> {
            return localVarFp.contentControllerCreateContent(requestParameters.createContentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of content items for a given parent ID.
         * @summary Get content by parent ID
         * @param {ContentApiContentControllerGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetContent(requestParameters: ContentApiContentControllerGetContentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ContentDto>> {
            return localVarFp.contentControllerGetContent(requestParameters.parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the authenticated user\'s root directory (\"My Contents\"). If the directory doesn\'t exist, it will be automatically created. This is the entry point for all content management operations.
         * @summary Get or create user\'s root directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetRootDirectory(options?: RawAxiosRequestConfig): AxiosPromise<ContentDto> {
            return localVarFp.contentControllerGetRootDirectory(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - interface
 * @export
 * @interface ContentApi
 */
export interface ContentApiInterface {
    /**
     * Creates a new note with a given title and parent ID.
     * @summary Create a new note
     * @param {ContentApiContentControllerCreateContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerCreateContent(requestParameters: ContentApiContentControllerCreateContentRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContentDto>;

    /**
     * Returns a list of content items for a given parent ID.
     * @summary Get content by parent ID
     * @param {ContentApiContentControllerGetContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetContent(requestParameters: ContentApiContentControllerGetContentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ContentDto>>;

    /**
     * Returns the authenticated user\'s root directory (\"My Contents\"). If the directory doesn\'t exist, it will be automatically created. This is the entry point for all content management operations.
     * @summary Get or create user\'s root directory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetRootDirectory(options?: RawAxiosRequestConfig): AxiosPromise<ContentDto>;

}

/**
 * Request parameters for contentControllerCreateContent operation in ContentApi.
 * @export
 * @interface ContentApiContentControllerCreateContentRequest
 */
export interface ContentApiContentControllerCreateContentRequest {
    /**
     * 
     * @type {CreateContentDto}
     * @memberof ContentApiContentControllerCreateContent
     */
    readonly createContentDto: CreateContentDto
}

/**
 * Request parameters for contentControllerGetContent operation in ContentApi.
 * @export
 * @interface ContentApiContentControllerGetContentRequest
 */
export interface ContentApiContentControllerGetContentRequest {
    /**
     * The ID of the parent content item.
     * @type {string}
     * @memberof ContentApiContentControllerGetContent
     */
    readonly parentId: string
}

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI implements ContentApiInterface {
    /**
     * Creates a new note with a given title and parent ID.
     * @summary Create a new note
     * @param {ContentApiContentControllerCreateContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentControllerCreateContent(requestParameters: ContentApiContentControllerCreateContentRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerCreateContent(requestParameters.createContentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of content items for a given parent ID.
     * @summary Get content by parent ID
     * @param {ContentApiContentControllerGetContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentControllerGetContent(requestParameters: ContentApiContentControllerGetContentRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetContent(requestParameters.parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the authenticated user\'s root directory (\"My Contents\"). If the directory doesn\'t exist, it will be automatically created. This is the entry point for all content management operations.
     * @summary Get or create user\'s root directory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public contentControllerGetRootDirectory(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetRootDirectory(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerGetHealth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerGetHealth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerGetHealth200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerGetHealth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerGetHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @summary Health check endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerGetHealth(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerGetHealth200Response> {
            return localVarFp.healthControllerGetHealth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - interface
 * @export
 * @interface HealthApi
 */
export interface HealthApiInterface {
    /**
     * 
     * @summary Health check endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    healthControllerGetHealth(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerGetHealth200Response>;

}

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI implements HealthApiInterface {
    /**
     * 
     * @summary Health check endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthControllerGetHealth(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerGetHealth(options).then((request) => request(this.axios, this.basePath));
    }
}



